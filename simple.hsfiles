{-# START_FILE README.md #-}
# {{name}}

```shell
$ ghcid --command "stack ghci --ghci-options=-fno-code"
```

```shell
$ stack run {{name}}
```

## ghcid

- [ndmitchell/ghcid](https://github.com/ndmitchell/ghcid)
- [ghcid for the win!](http://www.parsonsmatt.org/2018/05/19/ghcid_for_the_win.html)

{-# START_FILE .ghci.md #-}
:set -fwarn-unused-binds -fwarn-unused-imports
:set -isrc
:load Main

{-# START_FILE app/Main.hs #-}
module Main (main) where

import qualified Configuration.Dotenv       as Dotenv
import qualified Configuration.Dotenv.Types as Dotenv

main :: IO ()
main = do
  _ <- Dotenv.loadFile Dotenv.defaultConfig
  dummy <- liftIO $ fromMaybe (error "DUMMY_ENV is not setting")  <$> lookupEnv "DUMMY_ENV"
  putStrLn dummy
  
{-# START_FILE .env #-}
DUMMY_ENV=dummy

{-# START_FILE package.yaml #-}
name: {{name}}
dependencies:
  - base
  
ghc-options:
- -Wall
- -Wcompat
- -Wincomplete-uni-patterns
- -Wincomplete-record-updates
- -Wnoncanonical-monad-instances
- -Wredundant-constraints
- -Wtabs

library:
  source-dirs: src

executables:
  {{name}}:
    main: app/Main.hs
    dependencies:
    - {{name}}
    - dotenv

{-# START_FILE stack.yaml #-}
resolver: lts-12.2
extra-deps: []

{-# START_FILE ChangeLog.md #-}
# Changelog for {{name}}

## Unreleased changes

{-# START_FILE LICENSE #-}
Copyright {{author-name}}{{^author-name}}Author name here{{/author-name}} (c) {{year}}{{^year}}2018{{/year}}

All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:

    * Redistributions of source code must retain the above copyright
      notice, this list of conditions and the following disclaimer.

    * Redistributions in binary form must reproduce the above
      copyright notice, this list of conditions and the following
      disclaimer in the documentation and/or other materials provided
      with the distribution.

    * Neither the name of {{author-name}}{{^author-name}}Author name here{{/author-name}} nor the names of other
      contributors may be used to endorse or promote products derived
      from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
"AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

{-# START_FILE .gitignore #-}
.stack-work/
{{name}}.cabal
.env

{-# START_FILE .circleci/config.yml #-}
{{=<% %>=}}
version: 2

aliases:
  - &default_env
    environment:
      CACHE_KEY: 0
      STACK_VERSION: 1.7.1
  - &create_cache_key_file
    run:
      name: Create cache control key file
      command: echo $CACHE_KEY > cache_key
  - &restore_build_results
    restore_cache:
      keys:
        - stack-{{ checksum "cache_key" }}-{{ checksum "stack.yaml" }}-{{ checksum "package.yaml" }}
        - stack-{{ checksum "cache_key" }}-{{ checksum "stack.yaml" }}
        - stack-{{ checksum "cache_key" }}
  - &save_build_results
      save_cache:
        key: stack-{{ checksum "cache_key" }}-{{ checksum "stack.yaml" }}-{{ checksum "package.yaml" }}
        paths:
          - ~/.stack
          - ~/.local/bin
          - .stack-work
  - &display_stack_version
    run:
      name: Display stack version
      command: |
        stack upgrade --binary-version=$STACK_VERSION
        stack --version
jobs:
  build:
    docker:
      - image: quay.io/haskell_works/stack-build-minimal
    <<: *default_env
    steps:
      - checkout
      - *create_cache_key_file
      - *restore_build_results
      - *display_stack_version
      - run:
          name: Install dependencies
          command: stack test -j 1 --only-dependencies --no-terminal --no-run-tests
          no_output_timeout: 120m
      - run:
          name: Run stack test
          command: stack test --fast
      - *save_build_results
  pedantic:
    docker:
      - image: quay.io/haskell_works/stack-build-minimal
    <<: *default_env
    steps:
      - checkout
      - *create_cache_key_file
      - *restore_build_results
      - *display_stack_version
      - run:
          name: Run stack test --pedantic
          command: |
            stack clean
            stack test --pedantic --fast --no-run-tests
  check:
    docker:
      - image: quay.io/haskell_works/stack-build-minimal
    steps:
      - checkout
      - run:
          name: Run HLint
          command: |
            curl -sL https://raw.github.com/ndmitchell/hlint/master/misc/travis.sh | sh -s -- --version
            curl -sL https://raw.github.com/ndmitchell/hlint/master/misc/travis.sh | sh -s .
      - run:
          name: Run stylish-haskell
          command: |
            curl -sL https://raw.githubusercontent.com/jaspervdj/stylish-haskell/master/scripts/latest.sh | sh -s -- -i $(find . -type f -name "*hs" -not -path '.git' -not -path '*.stack-work*')
            git --no-pager diff --exit-code

workflows:
  version: 2
  test-check:
    jobs:
      - build
      - pedantic:
          requires:
            - build
      - check
<%={{ }}=%>

{-# START_FILE .restyled.yaml #-}
enabled: true
auto: true
restylers:
  - stylish-haskell:
      include:
        - "**/*.hs"
